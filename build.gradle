plugins {
    id 'net.ltgt.apt' version "0.9"
    id 'maven-publish'
    id 'application'
    id 'java'
    id 'maven'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
}

description = "Java Framework for building clustered RESTful web applications"
group = "com.kryptnostic"

apply from: "https://raw.githubusercontent.com/kryptnostic/gradles/master/kryptnostic.gradle"
apply from: "https://raw.githubusercontent.com/kryptnostic/gradles/master/mavenRepos.gradle"

mainClassName = "com.kryptnostic.rhizome.core.RhizomeAws"

run {
    if(System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

ext.sourceCompatibility=JavaVersion.VERSION_1_8
ext.targetCompatibility=JavaVersion.VERSION_1_8

dependencies {
    /*
     * AWS
     */
    compile group: 'com.amazonaws', name: 'aws-java-sdk-ec2', version: '1.11.50'
    compile 'com.amazonaws:aws-java-sdk-s3:1.11.50'
    //compile 'com.amazonaws:aws-java-sdk:1.11.50'


    /*
     * Immutables library for immutable objects
     */
    apt "org.immutables:value:${immutables_version}"

    /*
     * Servlet API 3.1 
     * 100% Java Servlet Container and Servlet Configuration
     */
    compile "javax.servlet.jsp:javax.servlet.jsp-api:${javax_servlet_version}"
    compile "javax.servlet:javax.servlet-api:${javax_servlet_api_version}"
    compile group: 'javax.servlet', name: 'jstl', version:'1.2'

    /*
     * SL4J + LOG4J2
     */
    compile group: "org.slf4j", name: "slf4j-api", version:"${slf4j_version}"

    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4j_version}" 
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j_version}" 
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4j_version}" 
    compile group: 'org.apache.logging.log4j', name: 'log4j-web', version: "${log4j_version}" 

    /*
     * CORE SPRING FRAMEWORK DEPENDENCIES
     * Depending injection, asynchronous execution, task scheduling, aspect oriented proxies, and more.
     */
     compile "org.springframework:spring-core:${project.spring_framework_version}"
     compile "org.springframework:spring-beans:${project.spring_framework_version}"
     compile "org.springframework:spring-context:${project.spring_framework_version}"
     compile "org.springframework:spring-aop:${project.spring_framework_version}"
     compile "org.springframework:spring-web:${project.spring_framework_version}"
     compile "org.springframework:spring-webmvc:${project.spring_framework_version}"
     compile "org.springframework:spring-test:${project.spring_framework_version}"

    /*
     * SPRING SECURITY DEPENDENCIES
     * Solid and battle tested security AuthN/AuthZ framwork
     */
     compile "org.springframework.security:spring-security-core:${project.spring_security_version}"
     compile "org.springframework.security:spring-security-web:${project.spring_security_version}"
     compile "org.springframework.security:spring-security-ldap:${project.spring_security_version}"
     compile "org.springframework.security:spring-security-config:${project.spring_security_version}"

     compile ("com.auth0:auth0-spring-security-api:${project.auth0_spring_version}") {
        exclude group: "org.springframework.boot"
     }

    /*
     * Metrics
     * Awesome reporting-- defaults to Graphite
     */
    compile "io.dropwizard.metrics:metrics-core:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-servlets:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-graphite:${dropwizard_metrics_version}"
    compile "com.ryantenney.metrics:metrics-spring:${ryantenney_metrics_version}"

    /*
     * GUAVA 
     * EventBus, FluentIterables, ListenableFutures and more
     */
     compile "com.google.guava:guava:${guava_version}"

    /*
     JODA TIME - A better datetime class.
     */
     compile "joda-time:joda-time:2.9.1"

    /*
     * APACHE COMMONS
     * Logging, StringUtils, RandomStringUtils, IOUtils, and more
     */
     compile "commons-io:commons-io:2.4"
     compile "org.apache.commons:commons-lang3:3.4"
     compile "commons-codec:commons-codec:1.9"

    /*
     * JACKSON SERIALIZATION
     * YAML via SnakeYaml
     * Afterburner for faster serialization
     * Guava integration
     * Smile for binary serialization
     * Jersey integration
     * Jaxb annotation support
     */
    compile "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson_version}"
    compile 'org.yaml:snakeyaml:1.13'

    /*
     * @Inject and @Nullable support
     */
     compile "javax.inject:javax.inject:1"
     

    /*
     * Jersey Spring Integration
     */
     compile ("org.glassfish.jersey.ext:jersey-spring3:2.23.2") {
        exclude module: 'spring-core'
        exclude module: 'spring-beans'
        exclude module: 'spring-web'
     }

    /*
     * Hibernate Validator
     */
     compile "org.hibernate:hibernate-validator:${hibernate_version}"
     compile "javax.el:javax.el-api:2.2.4"
     compile "org.glassfish.web:javax.el:2.2.4"

    /*
     * HAZELCAST - DISTRIBUTED DATA GRID
     * Transparent http clustering, distributed java.util collections
     */
     compile "com.hazelcast:hazelcast:${hazelcast_version}"
     compile "com.hazelcast:hazelcast-client:${hazelcast_version}"
     compile "com.hazelcast:hazelcast-wm:${hazelcast_wm_version}"
     compile "com.hazelcast:hazelcast-spring:${hazelcast_version}"


    /*
     * EMBEDDED JETTY FOR LOCAL TESTING
     * TODO: Add support for Tomcat
     * TODO: Integrate with application plugin for standalone deployment
     */ 
     compile "org.ow2.asm:asm:4.1"
     compile "org.eclipse.jetty.aggregate:jetty-all:${jetty_version}"
     //TODO: Once GA version of jetty-jsp is released update version.
     //compile "org.eclipse.jetty:jetty-jsp:9.3.0.M1" 
     compile "org.eclipse.jetty:jetty-spring:${jetty_version}"
     compile "org.eclipse.jetty.websocket:websocket-server:${jetty_version}"
     compile "org.eclipse.jetty.websocket:javax-websocket-server-impl:${jetty_version}"
     compile "org.eclipse.jetty:jetty-continuation:${jetty_version}"

     compile "io.netty:netty-transport-native-epoll:${netty_epoll_version}:${netty_os_arch}"

    /*
     * JAVAMAIL
     * Java email client.
     */
     compile "javax.mail:javax.mail-api:1.5.2"
     //compile "javax.mail:mail:1.5.6"
     compile "org.jodd:jodd-mail:3.7.1"

     /**
      * Cassandra
      */
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-core', version: "${cassandra_driver_version}"
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-extras', version: "${cassandra_driver_version}"
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-mapping', version: "${cassandra_driver_version}"
    compile "org.xerial.snappy:snappy-java:${snappy_version}"
    compile "net.jpountz.lz4:lz4:${lz4_version}"

	/**
	 * SPARK
	 */
    compile "org.apache.spark:spark-core_2.11:${spark_version}"
    compile "org.apache.spark:spark-sql_2.11:${spark_version}"
    
    /*
     * Jars in lib folder, generally Hyperdex
     */
     compile fileTree( dir: "lib/", include: "*.jar") 
     
     //compile "com.squareup.retrofit:retrofit:${retrofit_version}"
     //compile "com.squareup.retrofit:retrofit-converters:${retrofit_version}"

     compile 'com.squareup.retrofit2:retrofit:2.1.0'

    /*
     * WEBSOCKET DEPENDENCIES
     */
      compile "org.springframework:spring-websocket:${project.spring_framework_version}"
      compile "org.springframework:spring-messaging:${project.spring_framework_version}"
      compile "org.springframework.integration:spring-integration-websocket:4.3.1.RELEASE"

     /*
     * TESTING
     */
     testCompile 'junit:junit:4.12'
     testCompile "org.cassandraunit:cassandra-unit:3.1.1.0"
     /*
      * TODO: The rest we depend on Loom API via Jar dependency is to avoid circular classpath problems in Eclipse.
      * Some day we'll either create a separate project or make a rhizome-client library based off retrofit
      * that loom-api and rhizome server tests can both depend on.
      */ 
     
   if( project.hasProperty('developmentMode') && project.developmentMode ) {
        logger.quiet(project.name + " using project dependencies.")     
        compile project(":rhizome-client")
    } else {
        logger.quiet(project.name + " using jar dependencies.")
        compile "com.kryptnostic:rhizome-client:${rhizome_client_version}"
    }
     testCompile 'com.auth0:auth0:0.4.0'
 }

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility=JavaVersion.VERSION_1_8
    ext.targetCompatibility=JavaVersion.VERSION_1_8
}

install {
    configuration = configurations.published
}
